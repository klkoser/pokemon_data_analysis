type_colors <- list(
normal = '#A8A77A',
fire = '#EE8130',
water = '#6390F0',
electric = '#F7D02C',
grass = '#7AC74C',
ice = '#96D9D6',
fighting = '#C22E28',
poison = '#A33EA1',
ground = '#E2BF65',
flying = '#A98FF3',
psychic = '#F95587',
bug = '#A6B91A',
rock = '#B6A136',
ghost = '#735797',
dragon = '#6F35FC',
dark = '#705746',
steel = '#B7B7CE',
fairy = '#D685AD'
)
# Function to get Pokémon data by ID
get_pokemon_data <- function(id) {
url <- paste0("https://pokeapi.co/api/v2/pokemon/", id)
response <- GET(url)
content(response, as = "parsed", type = "application/json")
}
# Function to get Pokémon species data by ID
get_pokemon_species_data <- function(id) {
url <- paste0("https://pokeapi.co/api/v2/pokemon-species/", id)
response <- GET(url)
content(response, as = "parsed", type = "application/json")
}
# Fetch data for the first 50 Pokémon (adjust the range as needed)
pokemon_list <- lapply(1:50, get_pokemon_data)
species_list <- lapply(1:50, get_pokemon_species_data)
# Extract relevant data, including sprites, and create a dataframe
extract_data <- function(pokemon, species) {
stats <- pokemon$stats
types <- sapply(pokemon$types, function(x) x$type$name)
abilities <- sapply(pokemon$abilities, function(x) x$ability$name)
sprites <- pokemon$sprites
egg_cycles <- species$hatch_counter
legendary <- species$is_legendary
mythical <- species$is_mythical
base_happiness <- species$base_happiness
type1 <- ifelse(length(types) >= 1, types[1], "")
type2 <- ifelse(length(types) == 2, types[2], "")
data.frame(
front_default = sprites$front_default,
id = pokemon$id,
name = pokemon$name,
type1 = type1,
type2 = type2,
abilities = paste(abilities, collapse = ", "),
hp = stats[[1]]$base_stat,
attack = stats[[2]]$base_stat,
defense = stats[[3]]$base_stat,
sp_atk = stats[[4]]$base_stat,
sp_def = stats[[5]]$base_stat,
speed = stats[[6]]$base_stat,
legendary = legendary,
mythical = mythical,
height = pokemon$height,
weight = pokemon$weight,
base_experience = pokemon$base_experience,
egg_cycles = egg_cycles,
base_happiness = base_happiness,
stringsAsFactors = FALSE
)
}
# Combine Pokémon data with species data
combined_data <- Map(extract_data, pokemon_list, species_list)
pokemon_data <- do.call(rbind, combined_data)
# Function to create image HTML
image_html <- function(url) {
return(paste0('<img src="', url, '" height="80" width="80">'))  # Adjusted size
}
# Function to color the cells based on type
type_color <- function(value) {
if (is.na(value) || value == "NA") {
return("")
}
color <- type_colors[[tolower(value)]]
if (!is.null(color)) {
return(paste0('<span style="color: white; background-color: ', color, '; padding: 4px; border-radius: 4px;">', value, '</span>'))
}
return(value)
}
# Create the interactive table with reactable and reactablefmtr
pokemon_table <- reactable(
theme = default(centered = T, font_size =16, header_font_size = 18, cell_padding = 3),
pokemon_data,
columns = list(
id = colDef(name = "#", align = "center", headerStyle = list(textAlign = "center")),
front_default = colDef(name = "", align = "center", filterable = FALSE,
#  style = list(padding = "4px"),  # Adjust padding
cell = function(value) {
image_html(value)
}, html = TRUE),
name = colDef(name = "Name", align = "center", headerStyle = list(textAlign = "center")),
type1 = colDef(name = "Type 1", headerStyle = list(textAlign = "center"), cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
type2 = colDef(name = "Type 2", headerStyle = list(textAlign = "center"), cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
abilities = colDef(name = "Abilities", headerStyle = list(textAlign = "center"), width = 150),
hp = colDef(name = "HP", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
attack = colDef(name = "Attack", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
defense = colDef(name = "Defense", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_atk = colDef(name = "Sp. Atk", align = "center", headerStyle = list(textAlign = "center"),
cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_def = colDef(name = "Sp. Def", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
speed = colDef(name = "Speed", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
height = colDef(name = "Height", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
weight = colDef(name = "Weight", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_experience = colDef(name = "Base Exp.", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_happiness = colDef(name = "Happiness", align = "center", headerStyle = list(textAlign = "center"), cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
egg_cycles = colDef(name = "Egg Cycles", align = "center", headerStyle = list(textAlign = "center")),
legendary = colDef(name = "Legendary", align = "center", headerStyle = list(textAlign = "center")),
mythical = colDef(name = "Mythical", align = "center", headerStyle = list(textAlign = "center"))
),
defaultPageSize = 50,
filterable = TRUE,
style = list(
th = list(textTransform = "none")
)
) %>%
add_title(
title = reactablefmtr::html("Pokemon Stats Database"), font_size = 40, font_weight = 'bold') #%>%
add_source(font_size = 30)
# Save the table as a standalone HTML widget
htmlwidgets::saveWidget(pokemon_table, "datasets/pokemon_table.html", selfcontained = TRUE)
pokemon_table
# Create the interactive table with reactable and reactablefmtr
pokemon_table <- reactable(
theme = default(centered = T, font_size =16, header_font_size = 18, cell_padding = 3),
pokemon_data,
columns = list(
id = colDef(name = "#", align = "center", ),
front_default = colDef(name = "", align = "center", filterable = FALSE,
#  style = list(padding = "4px"),  # Adjust padding
cell = function(value) {
image_html(value)
}, html = TRUE),
name = colDef(name = "Name", align = "center", ),
type1 = colDef(name = "Type 1", align = "center", cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
type2 = colDef(name = "Type 2", align = "center", cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
abilities = colDef(name = "Abilities", align = "center", width = 150),
hp = colDef(name = "HP", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
attack = colDef(name = "Attack", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
defense = colDef(name = "Defense", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_atk = colDef(name = "Sp. Atk", align = "center",
cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_def = colDef(name = "Sp. Def", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
speed = colDef(name = "Speed", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
height = colDef(name = "Height", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
weight = colDef(name = "Weight", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_experience = colDef(name = "Base Exp.", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_happiness = colDef(name = "Happiness", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
egg_cycles = colDef(name = "Egg Cycles", align = "center"),
legendary = colDef(name = "Legendary", align = "center"),
mythical = colDef(name = "Mythical", align = "center")
),
defaultPageSize = 50,
filterable = TRUE,
style = list(
th = list(textTransform = "none")
)
) %>%
add_title(
title = reactablefmtr::html("Pokemon Stats Database"), font_size = 40, font_weight = 'bold') #%>%
pokemon_table
url <- "https://pokeapi.co/api/v2/pokemon?limit=1"
response <- GET(url)
data <- content(response, as = "parsed", type = "application/json")
# Total number of Pokémon
total_pokemon <- data$count
total_pokemon
# Define the color palette for Pokémon types
type_colors <- list(
normal = '#A8A77A',
fire = '#EE8130',
water = '#6390F0',
electric = '#F7D02C',
grass = '#7AC74C',
ice = '#96D9D6',
fighting = '#C22E28',
poison = '#A33EA1',
ground = '#E2BF65',
flying = '#A98FF3',
psychic = '#F95587',
bug = '#A6B91A',
rock = '#B6A136',
ghost = '#735797',
dragon = '#6F35FC',
dark = '#705746',
steel = '#B7B7CE',
fairy = '#D685AD'
)
# Function to get Pokémon data by ID
get_pokemon_data <- function(id) {
url <- paste0("https://pokeapi.co/api/v2/pokemon/", id)
response <- GET(url)
content(response, as = "parsed", type = "application/json")
}
# Function to get Pokémon species data by ID
get_pokemon_species_data <- function(id) {
url <- paste0("https://pokeapi.co/api/v2/pokemon-species/", id)
response <- GET(url)
content(response, as = "parsed", type = "application/json")
}
# Fetch data for the first 50 Pokémon (adjust the range as needed)
pokemon_list <- lapply(1:302, get_pokemon_data)
species_list <- lapply(1:302, get_pokemon_species_data)
# Extract relevant data, including sprites, and create a dataframe
extract_data <- function(pokemon, species) {
stats <- pokemon$stats
types <- sapply(pokemon$types, function(x) x$type$name)
abilities <- sapply(pokemon$abilities, function(x) x$ability$name)
sprites <- pokemon$sprites
egg_cycles <- species$hatch_counter
legendary <- species$is_legendary
mythical <- species$is_mythical
base_happiness <- species$base_happiness
type1 <- ifelse(length(types) >= 1, types[1], "")
type2 <- ifelse(length(types) == 2, types[2], "")
data.frame(
front_default = sprites$front_default,
id = pokemon$id,
name = pokemon$name,
type1 = type1,
type2 = type2,
abilities = paste(abilities, collapse = ", "),
hp = stats[[1]]$base_stat,
attack = stats[[2]]$base_stat,
defense = stats[[3]]$base_stat,
sp_atk = stats[[4]]$base_stat,
sp_def = stats[[5]]$base_stat,
speed = stats[[6]]$base_stat,
legendary = legendary,
mythical = mythical,
height = pokemon$height,
weight = pokemon$weight,
base_experience = pokemon$base_experience,
egg_cycles = egg_cycles,
base_happiness = base_happiness,
stringsAsFactors = FALSE
)
}
# Combine Pokémon data with species data
combined_data <- Map(extract_data, pokemon_list, species_list)
pokemon_data <- do.call(rbind, combined_data)
# Function to create image HTML
image_html <- function(url) {
return(paste0('<img src="', url, '" height="80" width="80">'))  # Adjusted size
}
# Function to color the cells based on type
type_color <- function(value) {
if (is.na(value) || value == "NA") {
return("")
}
color <- type_colors[[tolower(value)]]
if (!is.null(color)) {
return(paste0('<span style="color: white; background-color: ', color, '; padding: 4px; border-radius: 4px;">', value, '</span>'))
}
return(value)
}
# Create the interactive table with reactable and reactablefmtr
pokemon_table <- reactable(
theme = default(centered = T, font_size =16, header_font_size = 18, cell_padding = 3),
pokemon_data,
columns = list(
id = colDef(name = "#", align = "center", ),
front_default = colDef(name = "", align = "center", filterable = FALSE,
#  style = list(padding = "4px"),  # Adjust padding
cell = function(value) {
image_html(value)
}, html = TRUE),
name = colDef(name = "Name", align = "center", ),
type1 = colDef(name = "Type 1", align = "center", cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
type2 = colDef(name = "Type 2", align = "center", cell = function(value) {
htmltools::div(style = type_color(value), value)
}),
abilities = colDef(name = "Abilities", align = "center", width = 150),
hp = colDef(name = "HP", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
attack = colDef(name = "Attack", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
defense = colDef(name = "Defense", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_atk = colDef(name = "Sp. Atk", align = "center",
cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
sp_def = colDef(name = "Sp. Def", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE
)),
speed = colDef(name = "Speed", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
height = colDef(name = "Height", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
weight = colDef(name = "Weight", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_experience = colDef(name = "Base Exp.", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
base_happiness = colDef(name = "Happiness", align = "center", cell = data_bars(pokemon_data,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",
fill_gradient = TRUE,
box_shadow = TRUE,
round_edges = TRUE)),
egg_cycles = colDef(name = "Egg Cycles", align = "center"),
legendary = colDef(name = "Legendary", align = "center"),
mythical = colDef(name = "Mythical", align = "center")
),
defaultPageSize = 50,
filterable = TRUE,
style = list(
th = list(textTransform = "none")
)
) %>%
add_title(
title = reactablefmtr::html("Pokemon Stats Database"), font_size = 40, font_weight = 'bold') #%>%
add_source(font_size = 30)
# Save the table as a standalone HTML widget
htmlwidgets::saveWidget(pokemon_table, "datasets/pokemon_table.html", selfcontained = TRUE)
